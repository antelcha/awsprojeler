AWSTemplateFormatVersion: '2010-09-09'
Description: 'Chat Application Resources'

Resources:
  UserProfilesTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: user_profiles
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ChatMessagesStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: chat_messages
      RetentionPeriodHours: 24
      ShardCount: 1

  ProcessMessagesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: process-chat-messages
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // Kinesis'ten gelen mesajları işle
            const records = event.Records.map(record => {
              const data = Buffer.from(record.kinesis.data, 'base64').toString();
              return JSON.parse(data);
            });
            
            console.log('Processed messages:', records);
            return { statusCode: 200 };
          }
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 128

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: KinesisAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'kinesis:GetRecords'
                  - 'kinesis:GetShardIterator'
                  - 'kinesis:DescribeStream'
                  - 'kinesis:ListShards'
                Resource: !GetAtt ChatMessagesStream.Arn
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:GetItem'
                Resource: !GetAtt UserProfilesTable.Arn

  KinesisToLambda:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      EventSourceArn: !GetAtt ChatMessagesStream.Arn
      FunctionName: !Ref ProcessMessagesFunction
      StartingPosition: LATEST
      BatchSize: 100
      MaximumBatchingWindowInSeconds: 5

Outputs:
  UserProfilesTableName:
    Description: 'DynamoDB table name for user profiles'
    Value: !Ref UserProfilesTable
  
  ChatMessagesStreamName:
    Description: 'Kinesis stream name for chat messages'
    Value: !Ref ChatMessagesStream 